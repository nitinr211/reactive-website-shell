{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\wamp46\\\\www\\\\reactive-website-builder\\\\src\\\\builder\\\\TextList.js\";\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport { Rnd } from 'react-rnd';\n//import zIndex from \"@material-ui/core/styles/zIndex\";\nimport FontSelect from '../fonts/font-select';\nimport { relative } from \"path\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fs = require('fs');\nclass TextList extends React.Component {\n  constructor(props) {\n    super(props);\n    // const handleDelete = (id) => {\n    //   fetch('your_api_url', {\n    //     method: 'POST',\n    //     body: JSON.stringify({ itemid: id }),\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     }\n    //   })\n    //   .then(response => {\n    //     // handle the response\n    //   })\n    //   .catch(error => {\n    //     // handle the error\n    //   });\n    // };\n    //   axios.delete(apiUrl, { data: dataToDelete })\n    //     .then(response => {\n    //       console.log('Item deleted successfully!');\n    //     })\n    //     .catch(error => {\n    //       console.error('Error deleting item:', error);\n    //     });\n    // };\n    this.handleTextShrink = index => {\n      this.setState(() => {\n        // Decrease the font size of the item at the given index\n        const items = this.state.item;\n        items[index].fontsize = Math.max(items[index].fontsize - 10, 8);\n        return {\n          item: items\n        };\n      });\n    };\n    this.handleColorChange = (event, index) => {\n      this.setState(() => {\n        const selectedColor = event.target.value;\n        const items = this.state.item;\n        items[index].color = selectedColor;\n        console.log(items[index].color);\n        return {\n          item: items\n        };\n      });\n    };\n    this.handleTextGrow = index => {\n      this.setState(() => {\n        // Increase the font size of the item at the given index\n        const items = this.state.item;\n        items[index].fontsize = parseInt(items[index].fontsize, 10) + 10;\n        return {\n          items: items\n        };\n      });\n    };\n    this.handleFontChange = (event, index) => {\n      this.setState(() => {\n        const selectedFont = event.target.value;\n        const items = this.state.item;\n        items[index].font = selectedFont;\n        return {\n          items: items\n        };\n      });\n    };\n    // eventLogger = (data) => {\n    //   console.log(data.x);\n    //   axios.post('http://localhost/insert-flurry-web-data.php',{itemid: this.state.item,  xposition: data.x, yposition: data.y})\n    //   .then(function(response){\n    //       console.log(response);\n    // }).catch(function (error) {\n    //       console.log(error);\n    // }); \n    // };\n    // eventLogger = (data) => {\n    //   console.log(data.x);\n    //   axios.post('http://localhost/insert-flurry-web-data.php',{itemid: this.state.item,  xposition: data.x, yposition: data.y})\n    //   .then(function(response){\n    //       console.log(response);\n    // }).catch(function (error) {\n    //       console.log(error);\n    // }); \n    // };\n    this.toggleMenu = index => {\n      const newItems = [...this.state.item];\n      newItems[index].isOpen = !newItems[index].isOpen;\n      this.setState({\n        item: newItems\n      });\n    };\n    this.toggleEditable = index => {\n      const newItems = [...this.state.item];\n      newItems[index].isEditable = !newItems[index].isEditable;\n      this.setState({\n        item: newItems\n      });\n    };\n    this.state = {\n      item: [],\n      borders: [],\n      isMenuVisible: false\n    };\n    this.liContainers = [];\n  }\n\n  // componentDidMount() {\n  //   axios.get('http://localhost:9000/reactive-website-builder/APIs/select-text-data.php')\n  //     .then(res => {\n  //       const obj = res.data;\n  //       const objupdates = JSON.parse(\"[\" + obj + \"]\");\n  //       const itemsWithMenuOpen = objupdates.map(item => ({ ...item, isOpen: false, isEditable: false }));\n\n  //       this.liContainers = itemsWithMenuOpen.map(() => React.createRef());\n  //       this.setState({ item: itemsWithMenuOpen });\n  //     })\n  //     .catch(error => {\n  //       console.error(error);\n\n  //     });\n\n  // }\n\n  componentDidMount() {\n    axios.get('http://localhost:9000/reactive-website-builder/APIs/select-text-data.php').then(res => {\n      // Log the response to check the format\n      console.log(res.data);\n\n      // Assuming res.data is an array or an object you can map over\n      const objupdates = Array.isArray(res.data) ? res.data : [res.data]; // Ensure it's an array\n      const itemsWithMenuOpen = objupdates.map(item => ({\n        ...item,\n        isOpen: false,\n        isEditable: false\n      }));\n      console.log(itemsWithMenuOpen);\n      this.liContainers = itemsWithMenuOpen.map(() => /*#__PURE__*/React.createRef());\n      this.setState({\n        item: itemsWithMenuOpen\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  handleListResize(index) {\n    const liContainer = this.liContainers[index].current;\n    const minWidth = liContainer.clientWidth;\n    const minHeight = liContainer.clientHeight;\n    console.log(`minWidth: ${minWidth}, minHeight: ${minHeight}`);\n  }\n\n  // handleChange = (event, index) => {\n  //   this.setState((state) => {\n  //   const items = state.item.map((item, i) =>\n  //   i === index ? event.target.innerText : item\n  //   );\n  //   return { items };\n  //   });\n  //   };\n\n  //<li\n  //                    style={{ fontSize: this.fontSize }}\n  //                  onClick={(event) => this.handleClick(event, index)}\n  //                onBlur={() => this.handleBlur(index)}\n  //              onInput={(event) => this.handleChange(event, index)}\n  //            contentEditable={!item}\n  //          className={this.state.borders[index] ? 'border' : ''}\n  //      ></li>\n  //onMinusClick={() => this.handleQuantityChange(item.id, -1)} onPlusClick={() => this.handleQuantityChange(item.id, 1)} quantity={item.quantity}\n\n  render() {\n    const itemlist = this.state.item;\n    const rndStyle = {\n      display: 'flex'\n      // alignItems: 'center',\n      // justifyContent: 'center',\n      // border: '1px solid #ddd',\n      // background: '#f0f0f0',\n    };\n\n    if (this.state.item.length === 0) {\n      return null;\n    }\n    var top = 248;\n    var left = 700;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        bottom: 0,\n        top: 0,\n        overflow: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: itemlist.map((record, index) => {\n          var _this$liContainers$in, _this$liContainers$in2;\n          console.log(`record ${index}.isOpen: ${record.isOpen}`);\n          console.log(`record ${index}.isResizable: ${record.isOpen ? 'true' : 'false'}`);\n          return /*#__PURE__*/_jsxDEV(Rnd, {\n            bounds: \".app-container\",\n            style: rndStyle,\n            minWidth: (_this$liContainers$in = this.liContainers[index].current) === null || _this$liContainers$in === void 0 ? void 0 : _this$liContainers$in.clientWidth,\n            minHeight: (_this$liContainers$in2 = this.liContainers[index].current) === null || _this$liContainers$in2 === void 0 ? void 0 : _this$liContainers$in2.clientHeight,\n            onDragStop: record.isOpen ? this.eventLogger : null,\n            resizable: record.isOpen ? {\n              edges: {\n                top: true,\n                right: true,\n                bottom: true,\n                left: true\n              }\n            } : false,\n            resizeHandleWrapperStyle: {\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              ref: this.liContainers[index],\n              style: {\n                fontSize: item.fontsize,\n                fontFamily: item.font,\n                color: item.color,\n                width: '100%',\n                padding: '10px',\n                boxSizing: 'border-box',\n                position: 'relative',\n                border: item.isEditable ? '2px dotted black' : 'none' // Toggle border based on isEditable\n              },\n\n              onDoubleClick: () => {\n                this.toggleMenu(index);\n                this.toggleEditable(index);\n              },\n              contentEditable: item.isEditable // Allow editing if isEditable is true\n              ,\n              children: ReactHtmlParser(record.itemcode)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this);\n  }\n}\n// render() {\n//   const itemlist = this.state.item;\n//   const rndStyle = {\n//     display: 'flex',\n//   };\n\n//   if (this.state.item.length === 0) {\n//     return null;\n//   }\n\n//   return (\n//     <div style={{ position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, overflow: 'auto' }}>\n//       <ul>\n//         {itemlist.map((record, index) => {\n//           const isClicked = record.isClicked || false; // Define a flag to track the clicked state\n\n//           return (\n//             <Rnd\n//               key={index}\n//               bounds=\".app-container\"\n//               style={rndStyle}\n//               minWidth={this.liContainers[index].current?.clientWidth}\n//               minHeight={this.liContainers[index].current?.clientHeight}\n//               onDragStop={record.isOpen ? this.eventLogger : null}\n//               resizable={record.isOpen ? {\n//                 edges: { top: true, right: true, bottom: true, left: true },\n//               } : false}\n//               resizeHandleWrapperStyle={{\n//                 display: \"flex\",\n//                 justifyContent: \"center\",\n//                 alignItems: \"center\",\n//               }}\n//             >\n//               <li\n//                 ref={this.liContainers[index]}\n//                 key={index}\n//                 style={{\n//                   fontSize: itemlist[index].fontsize,\n//                   fontFamily: itemlist[index].font,\n//                   color: itemlist[index].color,\n//                   width: \"100%\",\n//                   padding: \"10px\",\n//                   boxSizing: \"border-box\",\n//                   position: \"relative\",\n//                 }}\n//                 onDoubleClick={() => {\n//                   // Toggle clicked state and switch behavior\n//                   this.setState((prevState) => {\n//                     const newItems = [...prevState.item];\n//                     newItems[index].isClicked = !newItems[index].isClicked;\n\n//                     if (newItems[index].isClicked) {\n//                       // Logic to write itemcode to third-party HTML\n//                       this.writeItemToThirdParty(record.itemcode);\n//                     } else {\n//                       // Logic to remove itemcode from third-party HTML\n//                       this.removeItemFromThirdParty(record.itemcode);\n//                     }\n\n//                     return { item: newItems };\n//                   });\n\n//                   this.toggleEditable(index);\n//                 }}\n//                 contentEditable={itemlist[index].isEditable}\n//               >\n//                 {isClicked \n//                   ? ReactHtmlParser(record.itemcode)  // Loaded from database\n//                   : null /* Optionally handle if you want to hide the item when unclicked */}\n//               </li>\n\n//               <div></div>\n//             </Rnd>\n//           );\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n\n//    eventLogger = (e, data) => {\n//       console.log(data.x);\n//       axios.post('http://localhost/insert-flurry-web-data.php',{itemid: 'random',  xposition: data.x, yposition: data.y})\n//       .then(function(response){\n//           console.log(response);\n//     }).catch(function (error) {\n//           console.log(error);\n//     }); \n//     };\n\n// function handleBlur() {\n//   // Close all menus when one of them loses focus\n//   setIsOpen(isOpen.map(() => false));\n// }\n//onBlur={handleBlur}\n\n//handleDelete   onClick={handleDelete}\n\nconst Menu = ({\n  handleTextGrow,\n  handleTextShrink,\n  handleFontChange,\n  isOpen,\n  handleColorChange\n}) => {\n  const outlineStyle = {\n    outline: '0.5px solid black',\n    borderRadius: '10px'\n  };\n  const fontList = ['Arial', 'Helvetica', 'Times New Roman', 'Courier New', 'Verdana', 'Georgia'];\n  const selectedFont = fontList[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    contentEditable: false,\n    children: isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTextShrink,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTextGrow,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        style: outlineStyle,\n        value: selectedFont,\n        onChange: handleFontChange,\n        children: /*#__PURE__*/_jsxDEV(FontSelect, {\n          fonts: fontList,\n          handleFontChange: handleFontChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        onChange: event => handleColorChange(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 7\n  }, this);\n};\n\n// function StaticHtml(isOpen) {\n//   //  {render({ itemCode: item.itemCode })}\n\n//   return (\n//    // <div onBlur={handleBlur}>\n//    <div>\n\n//       {isOpen && (\n//         <div>\n//           {/* {items.map((item) => (\n//             <div key={item.id} className=\"menu-item\">\n\n//             </div>\n//           ))}\n//           */}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// function exportItemsAsArray(items) {\n//   let itemsArray = [];\n//   items.forEach((item) => {\n//     itemsArray.push(item.itemCode);\n//   });\n//   return itemsArray;\n// }\n_c = Menu;\nexport default TextList;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","axios","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Rnd","FontSelect","relative","jsxDEV","_jsxDEV","fs","require","TextList","Component","constructor","props","handleTextShrink","index","setState","items","state","item","fontsize","Math","max","handleColorChange","event","selectedColor","target","value","color","console","log","handleTextGrow","parseInt","handleFontChange","selectedFont","font","toggleMenu","newItems","isOpen","toggleEditable","isEditable","borders","isMenuVisible","liContainers","componentDidMount","get","then","res","data","objupdates","Array","isArray","itemsWithMenuOpen","map","createRef","catch","error","handleListResize","liContainer","current","minWidth","clientWidth","minHeight","clientHeight","render","itemlist","rndStyle","display","length","top","left","style","position","right","bottom","overflow","children","record","_this$liContainers$in","_this$liContainers$in2","bounds","onDragStop","eventLogger","resizable","edges","resizeHandleWrapperStyle","justifyContent","alignItems","ref","fontSize","fontFamily","width","padding","boxSizing","border","onDoubleClick","contentEditable","itemcode","fileName","_jsxFileName","lineNumber","columnNumber","Menu","outlineStyle","outline","borderRadius","fontList","onClick","onChange","fonts","type","_c","$RefreshReg$"],"sources":["C:/wamp64/wamp46/www/reactive-website-builder/src/builder/TextList.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios';\r\nimport ReactHtmlParser, {processNodes, convertNodeToElement, htmlparser2} from 'react-html-parser'\r\nimport {Rnd} from 'react-rnd';\r\n//import zIndex from \"@material-ui/core/styles/zIndex\";\r\nimport FontSelect from '../fonts/font-select';\r\nimport { relative } from \"path\";\r\n\r\n\r\n\r\nconst fs = require('fs');\r\n\r\nclass TextList extends React.Component {\r\n\r\n\r\n  \r\n  constructor(props){\r\n    super(props);\r\n   \r\n    this.state = {\r\n      item: [],\r\n      borders: [],\r\n      isMenuVisible: false,\r\n      \r\n      }\r\n      this.liContainers = [];\r\n    }\r\n \r\n  \r\n\r\n  // componentDidMount() {\r\n  //   axios.get('http://localhost:9000/reactive-website-builder/APIs/select-text-data.php')\r\n  //     .then(res => {\r\n  //       const obj = res.data;\r\n  //       const objupdates = JSON.parse(\"[\" + obj + \"]\");\r\n  //       const itemsWithMenuOpen = objupdates.map(item => ({ ...item, isOpen: false, isEditable: false }));\r\n        \r\n  //       this.liContainers = itemsWithMenuOpen.map(() => React.createRef());\r\n  //       this.setState({ item: itemsWithMenuOpen });\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error(error);\r\n       \r\n  //     });\r\n      \r\n  // }\r\n     \r\n\r\n  componentDidMount() {\r\n    axios.get('http://localhost:9000/reactive-website-builder/APIs/select-text-data.php')\r\n      .then(res => {\r\n        // Log the response to check the format\r\n        console.log(res.data);\r\n  \r\n        // Assuming res.data is an array or an object you can map over\r\n        const objupdates = Array.isArray(res.data) ? res.data : [res.data]; // Ensure it's an array\r\n        const itemsWithMenuOpen = objupdates.map(item => ({\r\n          ...item,\r\n          isOpen: false,\r\n          isEditable: false\r\n        }));\r\n  \r\n\r\n        console.log(itemsWithMenuOpen);\r\n\r\n        this.liContainers = itemsWithMenuOpen.map(() => React.createRef());\r\n        this.setState({ item: itemsWithMenuOpen });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }\r\n  \r\n\r\n\r\n  \r\n  // const handleDelete = (id) => {\r\n  //   fetch('your_api_url', {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify({ itemid: id }),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json'\r\n  //     }\r\n  //   })\r\n  //   .then(response => {\r\n  //     // handle the response\r\n  //   })\r\n  //   .catch(error => {\r\n  //     // handle the error\r\n  //   });\r\n  // };\r\n  \r\n  //   axios.delete(apiUrl, { data: dataToDelete })\r\n  //     .then(response => {\r\n  //       console.log('Item deleted successfully!');\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error('Error deleting item:', error);\r\n  //     });\r\n  // };\r\n\r\n handleTextShrink = (index) => {\r\n  this.setState(() => {\r\n    // Decrease the font size of the item at the given index\r\n    const items = this.state.item;\r\n    items[index].fontsize = Math.max(items[index].fontsize - 10, 8);\r\n    return { item: items };\r\n  });\r\n}\r\n\r\nhandleColorChange = (event, index) => {\r\n  this.setState(() => {\r\n    const selectedColor = event.target.value;\r\n    const items = this.state.item;\r\n    items[index].color = selectedColor;\r\n    console.log(items[index].color);\r\n    return { item: items };\r\n  });\r\n}\r\n\r\n\r\n\r\n  handleTextGrow = (index) => {\r\n  this.setState(() => {\r\n  // Increase the font size of the item at the given index\r\n  const items = this.state.item;\r\n  items[index].fontsize = parseInt(items[index].fontsize, 10) + 10;\r\n  return { items: items};\r\n  });\r\n  }\r\n\r\n\r\n  handleFontChange = (event, index) => {\r\n      this.setState(() => {\r\n        const selectedFont = event.target.value;\r\n        const items = this.state.item;\r\n        items[index].font = selectedFont;\r\n        return { items: items };\r\n      });\r\n    };\r\n  \r\n\r\n    // eventLogger = (data) => {\r\n    //   console.log(data.x);\r\n    //   axios.post('http://localhost/insert-flurry-web-data.php',{itemid: this.state.item,  xposition: data.x, yposition: data.y})\r\n    //   .then(function(response){\r\n    //       console.log(response);\r\n    // }).catch(function (error) {\r\n    //       console.log(error);\r\n    // }); \r\n    // };\r\n\r\n\r\n    // eventLogger = (data) => {\r\n    //   console.log(data.x);\r\n    //   axios.post('http://localhost/insert-flurry-web-data.php',{itemid: this.state.item,  xposition: data.x, yposition: data.y})\r\n    //   .then(function(response){\r\n    //       console.log(response);\r\n    // }).catch(function (error) {\r\n    //       console.log(error);\r\n    // }); \r\n    // };\r\n\r\n \r\n  toggleMenu = (index) => {\r\n    const newItems = [...this.state.item];\r\n    newItems[index].isOpen = !newItems[index].isOpen;\r\n    this.setState({ item: newItems });\r\n  }\r\n\r\n  toggleEditable = (index) => {\r\n    const newItems = [...this.state.item];\r\n    newItems[index].isEditable = !newItems[index].isEditable;\r\n    this.setState({ item: newItems });\r\n  }\r\n\r\n  handleListResize(index) {\r\n    const liContainer = this.liContainers[index].current;\r\n    const minWidth = liContainer.clientWidth;\r\n    const minHeight = liContainer.clientHeight;\r\n    console.log(`minWidth: ${minWidth}, minHeight: ${minHeight}`);\r\n  }\r\n  \r\n   \r\n      // handleChange = (event, index) => {\r\n      //   this.setState((state) => {\r\n      //   const items = state.item.map((item, i) =>\r\n      //   i === index ? event.target.innerText : item\r\n      //   );\r\n      //   return { items };\r\n      //   });\r\n      //   };\r\n        \r\n    \r\n//<li\r\n  //                    style={{ fontSize: this.fontSize }}\r\n    //                  onClick={(event) => this.handleClick(event, index)}\r\n      //                onBlur={() => this.handleBlur(index)}\r\n        //              onInput={(event) => this.handleChange(event, index)}\r\n          //            contentEditable={!item}\r\n            //          className={this.state.borders[index] ? 'border' : ''}\r\n              //      ></li>\r\n//onMinusClick={() => this.handleQuantityChange(item.id, -1)} onPlusClick={() => this.handleQuantityChange(item.id, 1)} quantity={item.quantity}\r\n\r\nrender() {\r\n  const itemlist = this.state.item;\r\n  const rndStyle = {\r\n    display: 'flex',\r\n    // alignItems: 'center',\r\n    // justifyContent: 'center',\r\n    // border: '1px solid #ddd',\r\n    // background: '#f0f0f0',\r\n  };\r\n  if (this.state.item.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var top = 248;\r\n  var left = 700;\r\n\r\n  return (\r\n    <div style={{ position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, overflow: 'auto' }}>\r\n      <ul>\r\n        {itemlist.map((record, index) => {\r\n          console.log(`record ${index}.isOpen: ${record.isOpen}`);\r\n          console.log(`record ${index}.isResizable: ${record.isOpen ? 'true' : 'false'}`);\r\n          return (\r\n            <Rnd\r\n              key={index}\r\n              bounds=\".app-container\"\r\n              style={rndStyle}\r\n              minWidth={this.liContainers[index].current?.clientWidth}\r\n              minHeight={this.liContainers[index].current?.clientHeight}\r\n             \r\n              \r\n              onDragStop={record.isOpen ? this.eventLogger : null}\r\n              \r\n              resizable={record.isOpen ? {\r\n                edges: {\r\n                  top: true,\r\n                  right: true,\r\n                  bottom: true,\r\n                  left: true,\r\n                },\r\n              } : false}\r\n              resizeHandleWrapperStyle={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n              \r\n            >\r\n              \r\n            <li\r\n            ref={this.liContainers[index]}\r\n            key={index}\r\n            style={{\r\n              fontSize: item.fontsize,\r\n              fontFamily: item.font,\r\n              color: item.color,\r\n              width: '100%',\r\n              padding: '10px',\r\n              boxSizing: 'border-box',\r\n              position: 'relative',\r\n              border: item.isEditable ? '2px dotted black' : 'none' // Toggle border based on isEditable\r\n            }}\r\n            onDoubleClick={() => {\r\n              this.toggleMenu(index);\r\n              this.toggleEditable(index);\r\n            }}\r\n            contentEditable={item.isEditable} // Allow editing if isEditable is true\r\n          >\r\n                {ReactHtmlParser(record.itemcode)}\r\n\r\n             \r\n              </li>\r\n\r\n              <div></div>\r\n            </Rnd>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n}\r\n// render() {\r\n//   const itemlist = this.state.item;\r\n//   const rndStyle = {\r\n//     display: 'flex',\r\n//   };\r\n\r\n//   if (this.state.item.length === 0) {\r\n//     return null;\r\n//   }\r\n\r\n//   return (\r\n//     <div style={{ position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, overflow: 'auto' }}>\r\n//       <ul>\r\n//         {itemlist.map((record, index) => {\r\n//           const isClicked = record.isClicked || false; // Define a flag to track the clicked state\r\n\r\n//           return (\r\n//             <Rnd\r\n//               key={index}\r\n//               bounds=\".app-container\"\r\n//               style={rndStyle}\r\n//               minWidth={this.liContainers[index].current?.clientWidth}\r\n//               minHeight={this.liContainers[index].current?.clientHeight}\r\n//               onDragStop={record.isOpen ? this.eventLogger : null}\r\n//               resizable={record.isOpen ? {\r\n//                 edges: { top: true, right: true, bottom: true, left: true },\r\n//               } : false}\r\n//               resizeHandleWrapperStyle={{\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"center\",\r\n//                 alignItems: \"center\",\r\n//               }}\r\n//             >\r\n//               <li\r\n//                 ref={this.liContainers[index]}\r\n//                 key={index}\r\n//                 style={{\r\n//                   fontSize: itemlist[index].fontsize,\r\n//                   fontFamily: itemlist[index].font,\r\n//                   color: itemlist[index].color,\r\n//                   width: \"100%\",\r\n//                   padding: \"10px\",\r\n//                   boxSizing: \"border-box\",\r\n//                   position: \"relative\",\r\n//                 }}\r\n//                 onDoubleClick={() => {\r\n//                   // Toggle clicked state and switch behavior\r\n//                   this.setState((prevState) => {\r\n//                     const newItems = [...prevState.item];\r\n//                     newItems[index].isClicked = !newItems[index].isClicked;\r\n\r\n//                     if (newItems[index].isClicked) {\r\n//                       // Logic to write itemcode to third-party HTML\r\n//                       this.writeItemToThirdParty(record.itemcode);\r\n//                     } else {\r\n//                       // Logic to remove itemcode from third-party HTML\r\n//                       this.removeItemFromThirdParty(record.itemcode);\r\n//                     }\r\n\r\n//                     return { item: newItems };\r\n//                   });\r\n\r\n//                   this.toggleEditable(index);\r\n//                 }}\r\n//                 contentEditable={itemlist[index].isEditable}\r\n//               >\r\n//                 {isClicked \r\n//                   ? ReactHtmlParser(record.itemcode)  // Loaded from database\r\n//                   : null /* Optionally handle if you want to hide the item when unclicked */}\r\n//               </li>\r\n\r\n//               <div></div>\r\n//             </Rnd>\r\n//           );\r\n//         })}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n   \r\n//    eventLogger = (e, data) => {\r\n//       console.log(data.x);\r\n//       axios.post('http://localhost/insert-flurry-web-data.php',{itemid: 'random',  xposition: data.x, yposition: data.y})\r\n//       .then(function(response){\r\n//           console.log(response);\r\n//     }).catch(function (error) {\r\n//           console.log(error);\r\n//     }); \r\n//     };\r\n\r\n\r\n\r\n  \r\n    // function handleBlur() {\r\n    //   // Close all menus when one of them loses focus\r\n    //   setIsOpen(isOpen.map(() => false));\r\n    // }\r\n  //onBlur={handleBlur}\r\n   \r\n  //handleDelete   onClick={handleDelete}\r\n\r\n\r\n  const Menu = ({ handleTextGrow, handleTextShrink, handleFontChange, isOpen, handleColorChange,  }) => {\r\n    const outlineStyle = {\r\n      outline: '0.5px solid black',\r\n      borderRadius: '10px',\r\n    };\r\n    \r\n    const fontList = ['Arial', 'Helvetica', 'Times New Roman', 'Courier New', 'Verdana', 'Georgia'];\r\n    const selectedFont = fontList[0];\r\n    return (\r\n      <div contentEditable={false}>\r\n        {isOpen && (\r\n          <div>\r\n            \r\n            <button onClick={handleTextShrink}>-</button>\r\n            <span></span>\r\n            <button onClick={handleTextGrow}>+</button>\r\n            <select style={outlineStyle} value={selectedFont} onChange={handleFontChange}>\r\n              <FontSelect fonts={fontList} handleFontChange={handleFontChange} />\r\n            </select>\r\n            \r\n            <input type='color' onChange={(event) => handleColorChange(event)}></input>\r\n            <button>X</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n// function StaticHtml(isOpen) {\r\n//   //  {render({ itemCode: item.itemCode })}\r\n\r\n//   return (\r\n//    // <div onBlur={handleBlur}>\r\n//    <div>\r\n     \r\n//       {isOpen && (\r\n//         <div>\r\n//           {/* {items.map((item) => (\r\n//             <div key={item.id} className=\"menu-item\">\r\n             \r\n//             </div>\r\n//           ))}\r\n//           */}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function exportItemsAsArray(items) {\r\n//   let itemsArray = [];\r\n//   items.forEach((item) => {\r\n//     itemsArray.push(item.itemCode);\r\n//   });\r\n//   return itemsArray;\r\n// }\r\n\r\n\r\n\r\nexport default TextList;  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}